#version 430 core

#ifndef LOCAL_SIZE_X
    #define LOCAL_SIZE_X 8
#endif

#ifndef LOCAL_SIZE_Y
    #define LOCAL_SIZE_Y 8
#endif

layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1) in;



const uint flat_local_size = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;

shared float local_value_samples[flat_local_size];


uniform sampler2D screen_color;


/*
Intermediate storage for a recursive reduction.

First, each work group samples screen values into the shared storage.
Then each work group does a parallel reduction of it's shared storage,
and writes the result into this IntermediateBuffer.

Finally, we can run simple recursive reduction on the values in the buffer
in a different compute shader.
*/
layout (std430, binding = 0) restrict writeonly buffer IntermediateBuffer {
    float values[];
} intermediate;


// 1D index amongst all work groups.
uint work_group_index() {
    return
        gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y +
        gl_WorkGroupID.y * gl_NumWorkGroups.x +
        gl_WorkGroupID.x;
}



float color_value(vec3 color) {
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

// This is slightly better then my previous attempt.
// Now we sample a local_size_x * local_size_y block
// for each work group and then do a parallel reduce
// on the data and write into an intermediate buffer.
//
// I'm still using a simple sampler2D and texture()
// and not image2D as it saves me the headache of
// correctly rounding the texel indices.
// I'm not trying to be super accurate, and the
// floating point [0, 1] texture coordinate space is
// really nice to work with when the number of texels is
// not a multiple of the local size.
//
// The XY sampling uniformity with respect to aspect ratio
// should probably be accounted for by the number of work groups
// at the dispatch call.
void main() {
    // Find our tex_coord position for this invocation.
    const vec2 group_step_size = 1.0 / gl_NumWorkGroups.xy;
    const vec2 group_tex_coords = gl_WorkGroupID.xy * group_step_size;

    const vec2 local_step_size = group_step_size / gl_WorkGroupSize.xy;
    const vec2 tex_coords = group_tex_coords + local_step_size * gl_LocalInvocationID.xy;

    // TODO: Make 2 samples per-thread (for perf);
    // Not sure how to do this, when we want to preserve
    // the "square" structure of the block (8x8).


    // Make a local independent sample and write to the shared buffer.
    local_value_samples[gl_LocalInvocationIndex] =
        color_value(texture(screen_color, tex_coords).rgb);

    // Run parallel reduction on the shared samples.
    uint active_threads = flat_local_size;

    while (active_threads > 1) {

        active_threads /= 2;

        barrier();

        if (gl_LocalInvocationIndex < active_threads) {
            memoryBarrierShared();
            local_value_samples[gl_LocalInvocationIndex] +=
                local_value_samples[gl_LocalInvocationIndex + active_threads];
        }

    }

    // First of the local invocations for each group writes
    // the result to intermediate buffer.
    // No averaging yet, just accumulation.
    if (gl_LocalInvocationIndex == 0) {
        intermediate.values[work_group_index()] = local_value_samples[0];
    }
}

